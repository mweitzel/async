#!/bin/bash

ID_CMD=()
ID_PLIST=()
ID_STATUS=()

BEGIN='#-BEGIN'
END='#-END'

plow_n() {
  local n="$1"
  local word="$2"
  echo_n $n "$word"
  return_n $n
}

echo_n() {
  local n="$1"
  local word="$2"
  local i=0
  while test $i -lt $n
  do
    echo "$word"
    i=$(($i + 1))
  done
}

return_n() {
  local n="$1"
  echo -en "\033["$n"A"
}

jump_n() {
  local n="$1"
  echo -en "\033["$n"B"
}

start_background_job() {
  local id=$1
  local script="$2"

  bash -c "$script" 2>&1 > /dev/null &
  local p_id=$!
  echo "$BEGIN $id $p_id $script"
  wait $p_id 2>&1 > /dev/null
  echo "$END $id $?"
}

arg_n() {
  local n=$(($1+1))
  echo "${@:n:1}"
}

pprint_plist() {
  {
    echo '# ECODE CMD'
    for i in "${!ID_STATUS[@]}"
    do
      echo $i ${ID_STATUS[$i]} "$(echo "${ID_CMD[$i]}" "   "| sed 's/ /\_/g')"
    done
  } | column -t | sed 's/_/ /g'
}

print_plist() {
  local n="$(echo "${!ID_STATUS[@]}" | wc -w)"
  plow_n $(($n + 1))
  pprint_plist
  return_n $(($n + 1))
}

kill_remaining_children() {
  local i=""
  local p_id_to_kill=''
  for i in "${!ID_PLIST[@]}"
  do
    p_id_to_kill=${ID_PLIST[$i]}
    ID_STATUS[$i]='^C'
    kill $p_id_to_kill > /dev/null 2>&1
  done
}

jump_full() {
  local n="$(echo "${!ID_STATUS[@]}" | wc -w)"
  jump_n $(($n + 1))
}

after_arg() {
  local n=$(sed) #$(($1+1))
  echo "${@:n}"

}

respond_to_bg_job_status_changes() {
  local exit_code=0
  {
  while read line
  do
    test "${line:0:7}" = "$BEGIN" && {
      ID_STATUS[$(arg_n 2 $line)]='...'
      ID_PLIST[$(arg_n 2 $line)]=$(arg_n 3 $line)
      ID_CMD[$(arg_n 2 $line)]="$(echo 4 | after_arg $line)"
    }
    test "${line:0:5}" = "$END" && {
      local id=$(arg_n 2 $line)
      exit_code=$(arg_n 3 $line)
        unset ID_PLIST[$id]
        ID_STATUS[$id]=$exit_code
      test $exit_code = 0 || break
    }
    print_plist
  done
  kill_remaining_children
  } 1>&2
  pprint_plist
  return $exit_code
}

main() {
  local i=1
  sed '/^$/d' | # sanitize: trim empty lines, also prevent lack of terminate newline
  while read line
  do
    start_background_job $i "$line" &
    i=$((i + 1))
  done |
  respond_to_bg_job_status_changes
  local exit_code=$?
  {
    test $exit_code = 0 && {
      echo 'clean exit - 0'
    } || {
      echo "exit with code - $exit_code"
    }
  } 1>&2
  exit $exit_code
}

main
